// <auto-generated />
using System;
using BloodManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodManagement.Migrations
{
    [DbContext(typeof(DbContext1))]
    [Migration("20230217163226_7")]
    partial class _7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodManagement.Models.Beneficiary", b =>
                {
                    b.Property<long>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BeneficiaryId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.HasKey("BeneficiaryId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("User1Id");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("BloodManagement.Models.Donor", b =>
                {
                    b.Property<long>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DonorId"));

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.HasKey("DonorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("User1Id");

                    b.ToTable("Donor");
                });

            modelBuilder.Entity("BloodManagement.Models.Hospital", b =>
                {
                    b.Property<long>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HospitalId"));

                    b.Property<bool>("A")
                        .HasColumnType("bit");

                    b.Property<bool>("AB")
                        .HasColumnType("bit");

                    b.Property<bool>("AB_positve")
                        .HasColumnType("bit");

                    b.Property<bool>("A_positve")
                        .HasColumnType("bit");

                    b.Property<bool>("B")
                        .HasColumnType("bit");

                    b.Property<bool>("B_positve")
                        .HasColumnType("bit");

                    b.Property<bool>("C")
                        .HasColumnType("bit");

                    b.Property<bool>("C_positve")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contat_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("BloodManagement.Models.Review1", b =>
                {
                    b.Property<long>("Review1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Review1Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.HasKey("Review1Id");

                    b.HasIndex("User1Id");

                    b.ToTable("Review1");
                });

            modelBuilder.Entity("BloodManagement.Models.User1", b =>
                {
                    b.Property<long>("User1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("User1Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Blood_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_no")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User1Id");

                    b.ToTable("User1");
                });

            modelBuilder.Entity("BloodManagement.Models.Beneficiary", b =>
                {
                    b.HasOne("BloodManagement.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodManagement.Models.User1", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User1");
                });

            modelBuilder.Entity("BloodManagement.Models.Donor", b =>
                {
                    b.HasOne("BloodManagement.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodManagement.Models.User1", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User1");
                });

            modelBuilder.Entity("BloodManagement.Models.Review1", b =>
                {
                    b.HasOne("BloodManagement.Models.User1", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");
                });
#pragma warning restore 612, 618
        }
    }
}
